######################
#### INTRODUCTION ####
######################
The source of all the information:
www.environmentalcomputing.net

also: http://environmentalcomputing.net/ecostats2017/
password: BEES_2017


NOTES FROM PREVIOUS AUGUST 2016 WORKSHOP
--------------------------------------------------------------------------------------------------------

WHICH QUANTITATIVE SKILLS DO YOU NEED TO LEARN/IMPROVE FOR YOUR RESEARCH (List them below)

Doing as much as possible inside R for making tables and figures (i.e. avoid going in and out of R, excel, etc.)+1

functions/loops etc for making multi-panel figures, etc.YES!!!!+10

Principal components analysis vs. factor analysis 

Monte Carlo Markov Chains

Pretty graphs - YES! ^^

Multivariate Analyses+1

glm, GMLM, GAM+1+1+1+1+1

Troubleshooting - How to overcome errors independently 

ggplot2 and plots... +1+1+1+1+1+1

some basic application Rmarkdown.. (eg: paper)
choosing analysis

bootstrapping+1

what to present in a paper and Can we use R to make a science poster? (as opposed to just using ppt or LaTex?)+1

Saving R files properly. Moving R files around and using different computers / transferring to different group members. 

Updating R Studio 

Working with proportional data



--------------------------- DAY 1 -----------------------------



##############################
#### PROJECT ORGANISATION ####
##############################

A very useful blog post on project organisation:
http://nicercode.github.io/blog/2013-05-17-f-my-project/

The six high-level things in an organised project folder:
    1. data folder (including meta-data)
    2. outputs folder (subfolders "Figures" and "Tables" and possibly "Supplementary Material")
    3. Analysis.R (try to keep this RScript short and readable)
    4. R Studio Project
    5. Folder for R functions usually called "R"
    6. Folder for writing and references called "MS"

Good practice: no spaces or special characters in file names

Challenge #1: 
        1. Create an organized project directory for this workshop project following the nicer code model
        2. Include an RStudio Project in the folder
        2. Download the data from site http://environmentalcomputing.net/r-skills-thesis/
        3. Create an analysis.R file 
        4. Write one line of code in analysis.R to load the iris dataset into R
        5. When you finish put the green post-it on your laptop screen


Challenge #2:
Find the error that Will made in the Iris data set
Correct it!niris

Some interesting this to try:
R code:
# what is which.max() doing?
which.max(iris$Sepal.Length)
# it's a wrapper for this (or something like this)
which(iris$Sepal.Length==max(iris$Sepal.Length))
# try the bits individually
max(iris$Sepal.Length)
iris$Sepal.Length==max(iris$Sepal.Length

R code:
# indexing data frames 
class(iris$Sepal.Length)
class(iris["Sepal.Length"])
class(iris[,1])



DATA WRANGLING IN DPLYR

##############
#### {dplyr} ####
##############

install the {dplyr} package first! You can use the R command
R code:
    install.packages("dplyr")
    library(dplyr)

If you're having troubles, try a different mirror to download from (https://cran.r-project.org/mirrors.html); in R:
    install.packages("dplyr", repos="http://cran.csiro.au/")

If you're still having install troubles, download the source (https://cran.r-project.org/src/contrib/Rcpp_0.12.6.tar.gz), then install in R from source.
Make sure the .tar.gz file is in your working directory (or specify the full path to the file); in R:
    install.packages("Rcpp_0.12.6.tar.gz", repos=NULL, type="source")

The idea behind dplyr is that many of the common functions that you will need are descriptive verbs. The particularly useful ones that we will introduce you to today are:

mutate  – make new variables
select  and  filter   – subset columns and rows 
summarise  – summarise data
group_by  – grouping data
arrange  – order rows
rename    – rename variables

It uses elegant code with just the variable names rather than having to index variables by $. For example to create a log transformed variable in base R code, we would use:


iris$log.Petal.Length <- log(iris$Petal.Length)

To do it with the mutate function in dplyr we would use:

iris <- mutate(iris, log.Petal.Length = log(Petal.Length))

We can have as many new variable as we like in the same function. For example, to log transform each of our four variables:

iris <- mutate(iris,
               log.Petal.Length = log(Petal.Length),
               log.Petal.Width = log(Petal.Width),
               log.Sepal.Length = log(Sepal.Length),
               log.Sepal.Width = log(Sepal.Width))

Or, do them all at once with mutate_each (but note that this new data frame still has the old variable names)

iris_log <- mutate_each(iris, funs(log), Petal.Length, Petal.Width, Sepal.Length, Sepal.Width)

Relevant help tutorial: http://environmentalcomputing.net/making-new-variables/


SUMMARISING DATA

Relevant help tutorial: http://environmentalcomputing.net/summarising-data/

# Challenge: get the mean, sample size and standard deviation for petal length

iris_summary <- summarise(iris,
                          mean.Petal.Length = mean(Petal.Length),
                          n.Petal.Length = n(),
                          sd.Petal.Length = sd(Petal.Length))

# Challenge: get the mean, sample size and standard deviation for petal length grouped by species

iris_summary_2 <- iris %>%
                group_by(Species) %>%
                summarise(mean.Petal.Length = mean(Petal.Length),
                          n.Petal.Length = n(),
                          sd.Petal.Length = sd(Petal.Length))


Some things to try:

R code:
    # in one line
    iris.summary.stats <- summarise(group_by(iris,Species), mean.sepal.length = mean(Sepal.Length))
    # piping
    iris.summary.stats <-
    iris %>%
          group_by(Species) %>%
          summarise(mean.sepal.length = mean(Sepal.Length))
     # do all the columns
     iris.summary.stats <- 
    iris %>%
    group_by(Species) %>%
    summarise_each(funs(mean))

# group by more than one variable
# make some dummy sites
iris$pot <- as.factor(rep(c("pot1","pot2"), length.out=nrow(iris)))
iris.summary.stats <- 
    iris %>%
    group_by(Species, pot) %>%
    summarise_each(funs(mean))



SUBSETTING DATA

Relevant help tutorial: http://environmentalcomputing.net/subsetting-data/

# Challenge: Create a new data frame with just the length variables

iris_length <- select(iris, Species, Petal.Length, Sepal.Length)

iris_length <- select(iris, Species, contains("Length"))


# Challenge: Create a new data frame with only Iris versicolor

iris_versicolor <- filter(iris, Species == c("versicolor"))


# Challenge: Create a new data frame with only sepal widths less than 3

iris_Sepal3 <- filter(iris, Sepal.Width < 3)


It is good to learn the logical operators so that you can select rows and columns on any criteria
== is equals to
!= not equals to
$ logical and
| logical or



RESHAPING DATA

Relevant help tutorial: http://environmentalcomputing.net/reshaping-data/
#################
#### {reshape2} ####
#################

Some things to try:

Check out the functions gather() and spread() in the {tidyr} package - works hand in hand with {dplyr} - which are the next generation of the melt() and cast() functions in {reshape2}

# Challenge: Convert a species x sample data set into a wide format

Herbivores_long <- read.csv(file = "Herbivore_specialisation_long.csv", header = TRUE)

library(reshape2)

Herbivores_wide <- dcast(Herbivores_long,
                       Habitat + DayNight + Replicate + Mass ~ Species,
                       value.var = "Abundance", fill = 0)

Even easier with the spread function in the tidy r package - automatically keeps the variables that you don't want to change (Habitat, DayNight, Replicate and Mass) in the new, wide data frame


#################
##### {tidyr} ######
#################

Herbivores_wide2 <- spread(Herbivores_long, Species, Abundance, fill=0)

You can go back to the long format with the gather function from tidyr

Herbivores_long2 <- gather(Herbivores_wide2, Species, Abundance, 5:11)

The 5:11 bit defines which columns hold the variables that you want to gather. Their values go into Abundance and their names go into Species 




-------------------------    DAY 2    ----------------------------------------


########################
###### FUNCTIONS #######
########################

Function session workflow:
Why functions, using mean() as an example
Basic structure of a function
Challenge #1 - write two basic functions
To return or not to return?
Challenge #2 - functionalise my "bad" code
Default arguments and ordered arguments, using lm() as an example
Challenge #3 - write a function that works on different data types
Functions in functions (of course!)
Challenge #4 - write a function to use with {dplyr}

Points for future learning:
Scoping
Multiple and conditional returns
Using functions within the apply family of functions i.e. apply(), lapply(), sapply()
Testing function input/output
Organising projects that source() functions



Challenge #1:
Write a function that calculates the mean and the variance of a vector, that is, write your own version of mean() and var() - sigma^2 is fine


Challenge #2:
Turn this block of repetitive code into a function-based workflow (tip: you may need to think more carefully about your return)

iris <- iris

min(iris$Sepal.Length)
max(iris$Sepal.Length)
mean(iris$Sepal.Length)
sd(iris$Sepal.Length)
var(iris$Sepal.Length)
iris.sorted <- sort(iris$Sepal.Length)
plot(iris.sorted)

min(iris$Sepal.Width)
max(iris$Sepal.Width)
mean(iris$Sepal.Width)
sd(iris$Sepal.Width)
var(iris$Sepal.Width)
iris.sorted <- sort(iris$Sepal.Width)
plot(iris.sorted)

min(iris$Petal.Length)
max(iris$Petal.Length)
mean(iris$Petal.Length)
sd(iris$Petal.Length)
var(iris$Petal.Length)
iris.sorted <- sort(iris$Petal.Length)
plot(iris.sorted)

min(iris$Petal.Width)
max(iris$Petal.Width)
mean(iris$Petal.Width)
sd(iris$Petal.Width)
var(iris$Petal.Width)
iris.sorted <- sort(iris$Petal.Width)
plot(iris.sorted)

Possible Solutions:
    
plots.iris <- function(x) {
  y.max <- max(x)
  y.min <- min(x)
  y.mean <- mean(x)
  y.var <- var(x)  
  my.data <- data.frame(y.max,y.min,y.mean,y.var)
  sorted <- sort(x)
  plot(sorted)
  return(my.data)  
}

plots.iris(iris$Sepal.Length)


bunch1 = function(x){
a = min(x)
b = max(x)
c = mean(x)
d = sd(x)
e = var(x)
f = sort(x)
g = plot(f)
z=c(a,b,c,d,e,f,g)
return(z)
}

my.summary <- function(x) {
  # plot the data
  iris.sorted <- sort(x)
  plot(iris.sorted)
  # calculate the stats
  data.frame(min=min(x),
             max=max(x),
             mean=mean(x),
             sd=sd(x),
             var=var(x))
}
sepal.length.summary <- my.summary(iris$Sepal.Length)

my.summary <- function(x) {
  # plot the data
  iris.sorted <- sort(x)
  plot(iris.sorted)
  # calculate the stats
  df.out <- data.frame(min=min(x),
             max=max(x),
             mean=mean(x),
             sd=sd(x),
             var=var(x))
  return(df.out)
}
sepal.length.summary <- my.summary(iris$Sepal.Length)


Challenge #3:
1. Write a function that works on a vector
2. Write a function that works on a vector within a data frame (tip: your function will need >1 argument)
3. (if you're keen) Write a function that works on a data frame within a list

# one argument
my.mean <- function(x) {
  mean <- sum(x) / length(x)
  mean
}
my.mean(iris$Sepal.Length)

# two arguments
my.mean.df <- function(data, column) {
  mean <- sum(data[,column]) / length(data[,column])
  mean
}
my.mean.df(iris, column=2)

my.mean.df(iris) # doesn't work, but we can make a default value

# two arguments, one with a default
my.mean.df <- function(data, column=1) {
  mean <- sum(data[,column]) / length(data[,column])
  mean
}
my.mean.df(iris)
my.mean.df(iris, column=1)
my.mean.df(iris, column=2)

# it doesn't matter what you call the arguments
my.mean.df <- function(data, rainbowpony=1) {
  mean <- sum(data[,rainbowpony]) / length(data[,rainbowpony])
  mean
}
my.mean.df(iris, rainbowpony=1)


Challenge #4:
Write a function that converts mm to cm, and then use that within {dplyr} to do some of the summary statistics we performed yesterday



###################
#### GGPLOTING ####
###################

Tutorial: http://environmentalcomputing.net/plotting-with-ggplot/

CheatSheet: https://www.rstudio.com/wp-content/uploads/2015/03/ggplot2-cheatsheet.pdf


ggplot(herb_long,aes(x=Abundance,y=Mass,color=Habitat))+  
geom_point() 


Things to try:
aes_string() - opposed to aes() - gives you more flexibility for function writing with ggplot()
e.g.
ggplot(iris, aes_string(x="Sepal.Width", fill="Species"))+
    geom_histogram()

my.ggplot <- function(data, x.var, fill.var, file.name) {
  require(ggplot2)
  pdf(file=file.name, width=10, height=10)
  ggplot(data, aes_string(x=x.var, fill=fill.var))+
    geom_histogram()
  dev.off()
}
my.ggplot(iris, "Sepal.Width", "Species", "Sepal.Width.Plot.pdf")


make_herbivore_figure<-function(herb_long){
     pdf("output/Abundance_mass_by_species.pdf")
     p<-ggplot(herb_long,aes(x=Abundance,y=Mass,col=Species))+  
     geom_point()+theme_bw()
     print(p)
     dev.off()


########################
#### HELPFUL THINGS!! ### AWESOME THANK YOU!!! ^^
########################

Update to a new version of R, keeping all your current packages - use a nifty package {installr}, and update your R version in 2 lines:
    install.packages("installr")qq
    updateR()
    
    (also not working for me)
    #What do you do if you get the following error message? -->  Error: could not find function "updateR." To be clear, the package installr works, but the updateR() code does not work. I will Google it. 

########################
#### Next challenge, a function that makes hypotheses and writes theses!
########################

    
    